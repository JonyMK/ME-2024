resultado.independencia.anuncio.mercado$expected  # Ei = frequências Esperadas
# P-Value = P(Q >= Q_obs) = 1 - F(Q_obs) = 0.3423
(round(
(1 - pchisq(
resultado.independencia.anuncio.mercado$statistic,
resultado.independencia.anuncio.mercado$parameter
)), 4
))
simular_dados <- function() {
# Parâmetros Necessários para Simular os Dados:
n <- sample(234:254, 1)
m <- c(10, 500, 50)
s <- c(2, 150, 20)
vcr <- c(sample(65:95, 1)/100, sample(65:95, 1)/100, sample(65:95, 1)/100)
crm <- matrix(c(1, -vcr[1], vcr[2], -vcr[1], 1, -vcr[3], vcr[2], -vcr[3], 1), nrow = 3)
dd <- MASS::mvrnorm(n, mu = m, Sigma = crm * (s %*% t(s)))
plat <- sample(c("Google", "Facebook", "Instagram"), n, replace = TRUE, prob = c(0.4, 0.3, 0.3))
ta <- sample(c("Banner", "Vídeo", "Texto"), n, replace = TRUE, prob = c(0.4, 0.3, 0.3))
sm <- sample(c("Tecnologia", "Moda", "Alimentação"), n, replace = TRUE, prob = c(0.3, 0.3, 0.4))
# Criar uma Tabela com os Dados
DadosMarkDig <- data.frame(
ID = 1:n,
plataforma = plat,
anuncio = ta,
mercado = sm,
investimento = dd[,1],
cliques = as.integer(dd[,2]),
conversoes = as.integer(dd[,3])
)
# Guardar a Tabela num Ficheiro .TXT
write.table(
DadosMarkDig,
"DadosMarkDig.txt",
row.names = FALSE,
quote = FALSE
)
}
simular_dados()
DadosMarkDig <- read.csv("E:/ME-2024/Trabalho/DadosMarkDig.txt", sep="")
View(DadosMarkDig)
(valores_plataforma <- table(DadosMarkDig$plataforma))
(length(names(valores_plataforma)))
(valores_anuncio <- table(DadosMarkDig$anuncio))
(length(names(valores_anuncio)))
#### Frequências Observadas (Oi):
(table(DadosMarkDig$plataforma, DadosMarkDig$anuncio))
#### Tabela de Contingência:
(plataformas <- factor(DadosMarkDig$plataforma, levels = c("Facebook", "Google", "Instagram")))
(anuncios <- factor(DadosMarkDig$anuncio, levels = c("Banner", "Texto", "Vídeo")))
(tabela.contingencia.plataforma.anuncio <- table(plataformas, anuncios))
(resultado.independencia.plataforma.anuncio <- chisq.test(tabela.contingencia.plataforma.anuncio))
resultado.independencia.plataforma.anuncio$statistic # X^2_obs
resultado.independencia.plataforma.anuncio$parameter # Graus de Liberdade
resultado.independencia.plataforma.anuncio$p.value   # P-Value
resultado.independencia.plataforma.anuncio$observed  # Oi = frequências Observadas
resultado.independencia.plataforma.anuncio$expected  # Ei = frequências Esperadas
# P-Value = P(Q >= Q_obs) = 1 - F(Q_obs) = 0.2009
(round(
(1 - pchisq(
resultado.independencia.plataforma.anuncio$statistic,
resultado.independencia.plataforma.anuncio$parameter
)), 4
))
(valores_plataforma <- table(DadosMarkDig$plataforma))
(length(names(valores_plataforma)))
(valores_mercado <- table(DadosMarkDig$mercado))
(length(names(valores_mercado)))
#### Frequências Observadas (Oi):
(table(DadosMarkDig$plataforma, DadosMarkDig$mercado))
#### Tabela de Contingência:
(plataformas <- factor(DadosMarkDig$plataforma, levels = c("Facebook", "Google", "Instagram")))
(mercados <- factor(DadosMarkDig$mercado, levels = c("Alimentação", "Moda", "Tecnologia")))
(tabela.contingencia.plataforma.mercado <- table(plataformas, mercados))
(resultado.independencia.plataforma.mercado <- chisq.test(tabela.contingencia.plataforma.mercado))
resultado.independencia.plataforma.mercado$statistic # X^2_obs
resultado.independencia.plataforma.mercado$parameter # Graus de Liberdade
resultado.independencia.plataforma.mercado$p.value   # P-Value
resultado.independencia.plataforma.mercado$observed  # Oi = frequências Observadas
resultado.independencia.plataforma.mercado$expected  # Ei = frequências Esperadas
# P-Value = P(Q >= Q_obs) = 1 - F(Q_obs) = 0.3423
(round(
(1 - pchisq(
resultado.independencia.plataforma.mercado$statistic,
resultado.independencia.plataforma.mercado$parameter
)), 4
))
(valores_anuncio <- table(DadosMarkDig$anuncio))
(length(names(valores_anuncio)))
(valores_mercado <- table(DadosMarkDig$mercado))
(length(names(valores_mercado)))
#### Frequências Observadas (Oi):
(table(DadosMarkDig$anuncio, DadosMarkDig$mercado))
#### Tabela de Contingência:
(anuncios <- factor(DadosMarkDig$anuncio, levels = c("Banner", "Texto", "Vídeo")))
(mercados <- factor(DadosMarkDig$mercado, levels = c("Alimentação", "Moda", "Tecnologia")))
(tabela.contingencia.anuncio.mercado <- table(anuncios, mercados))
(resultado.independencia.anuncio.mercado <- chisq.test(tabela.contingencia.anuncio.mercado))
resultado.independencia.anuncio.mercado$statistic # X^2_obs
resultado.independencia.anuncio.mercado$parameter # Graus de Liberdade
resultado.independencia.anuncio.mercado$p.value   # P-Value
resultado.independencia.anuncio.mercado$observed  # Oi = frequências Observadas
resultado.independencia.anuncio.mercado$expected  # Ei = frequências Esperadas
# P-Value = P(Q >= Q_obs) = 1 - F(Q_obs) = 0.7977
(round(
(1 - pchisq(
resultado.independencia.anuncio.mercado$statistic,
resultado.independencia.anuncio.mercado$parameter
)), 4
))
#### Coeficiente de Contingência:
ContCoef(tabela.contingencia.plataforma.anuncio)
#### Coeficiente de Contingência:
DescTools::ContCoef(tabela.contingencia.plataforma.anuncio)
#### Coeficiente V de Crámer:
DescTools::CramerV(tabela.contingencia.plataforma.anuncio)
#### Coeficiente Tb de Kendall:
DescTools::KendallTauB(tabela.contingencia.plataforma.anuncio)
# OU
DescTools::KendallTauB(as.matrix(tabela.contingencia.plataforma.anuncio))
#### Coeficiente de Contingência:
DescTools::ContCoef(tabela.contingencia.plataforma.anuncio) # =
#### Coeficiente de Contingência:
(round(DescTools::ContCoef(tabela.contingencia.plataforma.anuncio), 4)) # = 0.2344471
#### Coeficiente V de Crámer:
(round(DescTools::CramerV(tabela.contingencia.plataforma.anuncio), 4))
#### Coeficiente Tb de Kendall:
(round(DescTools::KendallTauB(tabela.contingencia.plataforma.anuncio), 4))
# Diagrama de Dispersão:
plot(
x = DadosMarkDig$cliques,
y = DadosMarkDig$investimento,
pch = 20,
xlab = "Cliques",
ylab = "Investimento",
main = "Diagrama de Dispersão"
)
# Diagrama de Dispersão:
plot(
x = DadosMarkDig$cliques,
y = DadosMarkDig$investimento,
pch = 20,
xlab = "Cliques",
ylab = "Investimento",
main = "Diagrama de Dispersão"
)
# Diagrama de Dispersão:
plot(
x = DadosMarkDig$cliques,
y = DadosMarkDig$investimento,
pch = 2,
xlab = "Cliques",
ylab = "Investimento",
main = "Diagrama de Dispersão"
)
# Diagrama de Dispersão:
plot(
x = DadosMarkDig$cliques,
y = DadosMarkDig$investimento,
pch = 1,
xlab = "Cliques",
ylab = "Investimento",
main = "Diagrama de Dispersão"
)
# Diagrama de Dispersão:
plot(
x = DadosMarkDig$cliques,
y = DadosMarkDig$investimento,
pch = 10,
xlab = "Cliques",
ylab = "Investimento",
main = "Diagrama de Dispersão"
)
# Diagrama de Dispersão:
plot(
x = DadosMarkDig$cliques,
y = DadosMarkDig$investimento,
pch = 30,
xlab = "Cliques",
ylab = "Investimento",
main = "Diagrama de Dispersão"
)
# Diagrama de Dispersão:
plot(
x = DadosMarkDig$cliques,
y = DadosMarkDig$investimento,
pch = 20,
xlab = "Cliques",
ylab = "Investimento",
main = "Diagrama de Dispersão"
)
# Diagrama de Dispersão:
plot(
x = DadosMarkDig$cliques,
y = DadosMarkDig$investimento,
pch = 21,
xlab = "Cliques",
ylab = "Investimento",
main = "Diagrama de Dispersão"
)
# Diagrama de Dispersão:
plot(
x = DadosMarkDig$cliques,
y = DadosMarkDig$investimento,
pch = 20,
xlab = "Cliques",
ylab = "Investimento",
main = "Diagrama de Dispersão"
)
### Coeficiente de Correlação Linear de Pearson:
cor(
x = DadosMarkDig$cliques,
y = DadosMarkDig$investimento,
method = "pearson"
)
### Coeficiente de Correlação Linear de Pearson:
(round(cor(
x = DadosMarkDig$cliques,
y = DadosMarkDig$investimento,
method = "pearson"
), 4))
(round(
cor(
x = DadosMarkDig$cliques,
y = DadosMarkDig$investimento,
method = "pearson"
),
4
))
#### Modelo:
(modelo.cliques.investimento <- lm(
formula = investimento~cliques,
data = DadosMarkDig
))
#### Coeficientes Obtidos:
(a.cliques.investimento <- modelo.cliques.investimento$coefficients[[1]])
(b.cliques.investimento <- modelo.cliques.investimento$coefficients[[2]])
#### Diagrama de Dispersão:
plot(
x = DadosMarkDig$cliques,
y = DadosMarkDig$investimento,
pch = 20,
xlab = "Cliques",
ylab = "Investimento",
main = "Diagrama de Dispersão"
)
#### Reta y^ = a + bx no Diagrama de Dispersão:
abline(
a = a.cliques.investimento,
b = b.cliques.investimento,
col = "red"
)
# Resíduos:
modelo.cliques.investimento$residuals
plot(
x = modelo.cliques.investimento$fitted.values,
y = modelo.cliques.investimento$residuals,
pch = 20,
col = "green",
xlab = "Gastos em Publicidade",
ylab = "Valores das Vendas",
main = "Diagrama de Dispersão - Resíduos"
)
abline(
h = 0,
col = "red"
)
(sd(modelo.cliques.investimento$residuals))
(round(sd(modelo.cliques.investimento$residuals), 4))
plot(
x = modelo.cliques.investimento$fitted.values,
y = modelo.cliques.investimento$residuals,
pch = 20,
col = "green",
xlab = "Cliques",
ylab = "Investimento",
main = "Diagrama de Dispersão - Resíduos"
)
abline(
h = 0,
col = "red"
)
(round(sd(modelo.cliques.investimento$residuals), 4)) # = 1.0662
### Coeficiente de Correlação Linear de Pearson:
(round(
cor(
x = DadosMarkDig$conversoes,
y = DadosMarkDig$investimento,
method = "pearson"
),
4
)) # = -0.8384 => Correlação Linear Negativa Forte
#### Modelo:
(modelo.conversoes.investimento <- lm(
formula = conversoes~cliques,
data = DadosMarkDig
))
#### Coeficientes Obtidos:
(a.conversoes.investimento <- modelo.conversoes.investimento$coefficients[[1]])
(b.conversoes.investimento <- modelo.conversoes.investimento$coefficients[[2]])
#### Diagrama de Dispersão:
plot(
x = DadosMarkDig$conversoes,
y = DadosMarkDig$investimento,
pch = 20,
xlab = "Conversões",
ylab = "Investimento",
main = "Diagrama de Dispersão"
) # => Correlação Linear Negativa Forte
#### Reta y^ = a + bx no Diagrama de Dispersão:
abline(
a = a.conversoes.investimento,
b = b.conversoes.investimento,
col = "red"
)
#### Coeficientes Obtidos:
(a.conversoes.investimento <- modelo.conversoes.investimento$coefficients[[1]])
(b.conversoes.investimento <- modelo.conversoes.investimento$coefficients[[2]])
#### Diagrama de Dispersão:
plot(
x = DadosMarkDig$conversoes,
y = DadosMarkDig$investimento,
pch = 20,
xlab = "Conversões",
ylab = "Investimento",
main = "Diagrama de Dispersão"
) # => Correlação Linear Positiva Forte
#### Reta y^ = a + bx no Diagrama de Dispersão:
abline(
a = a.conversoes.investimento,
b = b.conversoes.investimento,
col = "red"
)
#### Modelo:
(modelo.conversoes.investimento <- lm(
formula = conversoes~cliques,
data = DadosMarkDig
))
#### Coeficientes Obtidos:
(a.conversoes.investimento <- modelo.conversoes.investimento$coefficients[[1]])
(b.conversoes.investimento <- modelo.conversoes.investimento$coefficients[[2]])
#### Diagrama de Dispersão:
plot(
x = DadosMarkDig$conversoes,
y = DadosMarkDig$investimento,
pch = 20,
xlab = "Conversões",
ylab = "Investimento",
main = "Diagrama de Dispersão"
) # => Correlação Linear Positiva Forte
#### Reta y^ = a + bx no Diagrama de Dispersão:
abline(
a = a.conversoes.investimento,
b = b.conversoes.investimento,
col = "red"
)
# Resíduos:
modelo.conversoes.investimento$residuals
plot(
x = modelo.conversoes.investimento$fitted.values,
y = modelo.conversoes.investimento$residuals,
pch = 20,
col = "green",
xlab = "Conversões",
ylab = "Investimento",
main = "Diagrama de Dispersão - Resíduos"
)
abline(
h = 0,
col = "red"
)
(round(sd(modelo.conversoes.investimento$residuals), 4)) # = 1.0662
#### Diagrama de Dispersão:
plot(
x = DadosMarkDig$conversoes,
y = DadosMarkDig$investimento,
pch = 20,
xlab = "Conversões",
ylab = "Investimento",
main = "Diagrama de Dispersão"
) # => Correlação Linear Positiva Forte
#### Reta y^ = a + bx no Diagrama de Dispersão:
abline(
a = a.conversoes.investimento,
b = b.conversoes.investimento,
col = "red"
)
dev.new()
#### Diagrama de Dispersão:
plot(
x = DadosMarkDig$conversoes,
y = DadosMarkDig$investimento,
pch = 20,
xlab = "Conversões",
ylab = "Investimento",
main = "Diagrama de Dispersão"
) # => Correlação Linear Positiva Forte
#### Reta y^ = a + bx no Diagrama de Dispersão:
abline(
a = a.conversoes.investimento,
b = b.conversoes.investimento,
col = "red"
)
#### Reta y^ = a + bx no Diagrama de Dispersão:
abline(
a = a.cliques.investimento,
b = b.cliques.investimento,
col = "red"
)
#### Modelo:
(modelo.conversoes.investimento <- lm(
formula = investimento~conversoes,
data = DadosMarkDig
))
#### Coeficientes Obtidos:
(a.conversoes.investimento <- modelo.conversoes.investimento$coefficients[[1]])
(b.conversoes.investimento <- modelo.conversoes.investimento$coefficients[[2]])
#### Diagrama de Dispersão:
plot(
x = DadosMarkDig$conversoes,
y = DadosMarkDig$investimento,
pch = 20,
xlab = "Conversões",
ylab = "Investimento",
main = "Diagrama de Dispersão"
) # => Correlação Linear Positiva Forte
#### Reta y^ = a + bx no Diagrama de Dispersão:
abline(
a = a.conversoes.investimento,
b = b.conversoes.investimento,
col = "red"
)
# Resíduos:
modelo.conversoes.investimento$residuals
plot(
x = modelo.conversoes.investimento$fitted.values,
y = modelo.conversoes.investimento$residuals,
pch = 20,
col = "green",
xlab = "Conversões",
ylab = "Investimento",
main = "Diagrama de Dispersão - Resíduos"
)
abline(
h = 0,
col = "red"
)
(round(sd(modelo.conversoes.investimento$residuals), 4)) # = 13.2342
### Coeficiente de Correlação Linear de Pearson:
(round(
cor(
x = DadosMarkDig$cliques,
y = DadosMarkDig$conversoes,
method = "pearson"
),
4
)) # = 0.8946 => Correlação Linear Positiva Forte
#### Modelo:
(modelo.cliques.conversoes <- lm(
formula = conversoes~cliques,
data = DadosMarkDig
))
#### Coeficientes Obtidos:
(a.cliques.conversoes <- modelo.cliques.conversoes$coefficients[[1]])
(b.cliques.conversoes <- modelo.cliques.conversoes$coefficients[[2]])
#### Diagrama de Dispersão:
plot(
x = DadosMarkDig$cliques,
y = DadosMarkDig$conversoes,
pch = 20,
xlab = "Cliques",
ylab = "Conversões",
main = "Diagrama de Dispersão"
) # => Correlação Linear Positiva Forte
#### Diagrama de Dispersão:
plot(
x = DadosMarkDig$cliques,
y = DadosMarkDig$conversoes,
pch = 20,
xlab = "Cliques",
ylab = "Conversões",
main = "Diagrama de Dispersão"
) # => Correlação Linear Positiva Forte
#### Reta y^ = a + bx no Diagrama de Dispersão:
abline(
a = a.cliques.conversoes,
b = b.cliques.conversoes,
col = "red"
)
#### Reta y^ = a + bx no Diagrama de Dispersão:
abline(
a = a.cliques.conversoes,
b = b.cliques.conversoes,
col = "red"
)
# Resíduos:
modelo.cliques.conversoes$residuals
# Resíduos:
modelo.cliques.conversoes$residuals
plot(
x = modelo.cliques.conversoes$fitted.values,
y = modelo.cliques.conversoes$residuals,
pch = 20,
col = "green",
xlab = "Cliques",
ylab = "Conversões",
main = "Diagrama de Dispersão - Resíduos"
)
abline(
h = 0,
col = "red"
)
(round(sd(modelo.cliques.conversoes$residuals), 4)) # = 0.8742
